// Time Complexity: O(m + n) where m -> length of S, n -> length of T
// Space Complexity: O(1) as size of the hashmap will always be <= 26

class Solution {
    public String customSortString(String S, String T) {
        if (S == null || S.length() == 0 || T == null || T.length() == 0) return "";
        Map<Character, Integer> map = new HashMap<>();
        StringBuilder res = new StringBuilder();

        for (int i = 0; i < T.length(); i++) {

            char c = T.charAt(i);
            map.put(c, map.getOrDefault(c, 0) + 1);

        }

        for(int i = 0 ; i < S.length() ; i++){
            char c = S.charAt(i);
            if(map.containsKey(c)){
                int count = map.get(c);
                while(count > 0){
                    res.append(c);
                }
                map.remove(c);
            }
        }

        for(Map.Entry<Character, Integer> entry: map.entrySet()){
            char c = entry.getKey();
            int count = entry.getValue();
            while(count > 0){
                res.append(c);
                count--;
            }
        }

        return res.toString();

    }
}
