// Time Complexity :O(p.length + s.length)
// Space Complexity :O(p.length)
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach
class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        List<Integer> result = new ArrayList();
        
        if(s == null || p.length() > s.length())
            return result;
        
        HashMap<Character, Integer> map = new HashMap<>();
        
        for(int i=0; i<p.length(); i++)
        {
            char c = p.charAt(i);
           map.put(c, map.getOrDefault(c,0)+1);
        }
        
       // System.out.println(map);
        int slow =0;
        int match =0;
        
        for(int i=0; i<s.length(); i++)
        {
            char in = s.charAt(i);
            
           if(map.containsKey(in))
           {
                int count = map.get(in);
                count--;
               map.put(in,count);
                
               if(count == 0)
                    match++;
           }
            if( i >= p.length())
            {
                char out = s.charAt(i-p.length());
                if(map.containsKey(out))
                {
                    int count = map.get(out);
                    count++;
                    map.put(out,count);
                    
                    if(count == 1)
                        match--;
                }
            }

            if(match == map.size())
                result.add(i - p.length() + 1);
        }
          
        return result;
    }
}
