//TC: O(N)
//SC: O(1) HashMap 26 chars

//Approach: Idea is to use SLIDING WINDOW strategy and use HashMap to put all unique characters
//Hint: Update slow pointer as Max(slow, hmap.get(currChar));

class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s==null || s.length()==0){
            return 0;
        }
        HashMap<Character,Integer> hmap = new HashMap<>();
        int count = 0;
        int i = 0;
        //abcabcbb
        for(int j = 0 ;  j < s.length() ; j++){
            char c = s. charAt(j);
            if(hmap.containsKey(c)){
                i = Math.max(i, hmap.get(c));   //why this ??
         //       i = hmap.get(c);                //why NOT this ??
            }
            hmap.put(c, j+1); 
            count = Math.max(count , j - i + 1);
        }     
        // System.out.println(hmap);
        return count;
    }
}
