Time: O(n)
Space: O(1); Although we are using Hashmap for storing, it would be constant space as there are only 26 lower case alphabets

class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s==null || s.length()==0 ) return 0;
        int maxLen = 0; int slow =0;
        HashMap<Character, Integer> map = new HashMap<>();
        for(int i=0; i< s.length(); i++)
        {
            Character c = s.charAt(i);
            if(map.containsKey(c))
            {
                slow = Math.max(slow, map.get(c));
            }
            maxLen = Math.max(maxLen, i-slow+1);
            map.put(c, i+1);
            
        }
        return maxLen;
    }
}
