Approach 1 : Brute Force Approach
Time Comlexity : O(n3)
Space Complexity : O(size of hash Set- 26 characters)
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int ans=0;
        for (int i=0;i<s.length();i++){ // Time Complexity : O(n.n2)= O(n^3 )
            for (int j=i;j<=s.length();j++){
                if (allunique(s,i,j)){
                    ans=Math.max(ans,j-i);
                }
            }
        }
        return ans;
        
    }
   
    public boolean allunique(String s,int start,int end){
        Set<Character> set=new HashSet<>();
        for (int i=start;i<end;i++){
            Character ch = s.charAt(i);
            if(set.contains(ch)){
                return false;
            }
            set.add(ch);
        }
        return true;
    }
}

Approach 2 : Two pointer Approach and the move the fast pointer to store the values of key as index +1 . As soon as you find repeated characters then move slow to
max(slow,value of the character)
Time complexity : Linear . O(n) ----> Length of string 
Space Complexity : O(1)
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int slow=0; int fast=0;int max=0;
        HashMap<Character,Integer> map = new HashMap<>();
        while(fast<s.length()){
            char c=s.charAt(fast);
            if (map.containsKey(c)){
                slow=Math.max(slow,map.get(c));
            }
            map.put(c,fast+1);
            max=Math.max(max,fast-slow+1);
            fast++;
        }
        return max;
        
    }
}

If need the longest string then create two more pointers.
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int slow=0; int fast=0;int longest=0;
        int start=0;int end=0; //
        HashMap<Character,Integer> map=new HashMap<>();
        while(fast<s.length()){
            char ch=s.charAt(fast);
            if (map.containsKey(ch)){
                slow=Math.max(slow,map.get(ch));
            }
            map.put(ch,fast+1);
            if (longest<fast-slow+1){
                longest=fast-slow+1;
                start=slow;
                end=fast;
            }
            //longest=Math.max(longest,fast-slow+1);
            
            fast++;
        }
        System.out.println(start);
        System.out.println(end);
        return longest;
        
    }
}

